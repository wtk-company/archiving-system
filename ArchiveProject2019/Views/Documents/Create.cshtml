@model ArchiveProject2019.ViewModel.DocumentDocIdFieldsValuesViewModel

@{
    ViewBag.Title = "إنشاء وثيقة جديدة";
    Layout = "~/Views/Shared/_DashBoardLayout.cshtml";
}

@Html.Partial("_StartView")


<script src="~/Scripts/ckeditor/ckeditor.js"></script>
<script src="https://asprise.azureedge.net/scannerjs/scanner.js" type="text/javascript"></script>

<script>
    //
    // Please read scanner.js developer's guide at: http://asprise.com/document-scan-upload-image-browser/ie-chrome-firefox-scanner-docs.html
    //
    /** Initiates a scan */
    function scanToJpg() {
        scanner.scan(displayImagesOnPage,
            {
                "output_settings": [
                    {
                        "type": "return-base64",
                        "format": "jpg"
                    }
                ]
            }
        );
    }
    /** Processes the scan result */
    function displayImagesOnPage(successful, mesg, response) {
        if (!successful) { // On error
            console.error('Failed: ' + mesg);
            return;
        }
        if (successful && mesg != null && mesg.toLowerCase().indexOf('user cancel') >= 0) { // User cancelled.
            console.info('User cancelled');
            return;
        }
        var scannedImages = scanner.getScannedImages(response, true, false); // returns an array of ScannedImage
        for (var i = 0; (scannedImages instanceof Array) && i < scannedImages.length; i++) {
            var scannedImage = scannedImages[i];
            processScannedImage(scannedImage);
        }
    }
    /** Images scanned so far. */
    var imagesScanned = [];
    /** Processes a ScannedImage */
    function processScannedImage(scannedImage) {
        imagesScanned.push(scannedImage);
        var elementImg = scanner.createDomElementFromModel({
            'name': 'input',
            'attributes': {
                'class': 'scanned hide',
                'name': 'myfile',
                'display': 'none',
                'value': scannedImage.src
            }
        });
        document.getElementById('images').appendChild(elementImg);
    }

</script>

<style>
    img.scanned {
        height: 200px; /** Sets the display size */
        margin-right: 12px;
    }

    div#images {
        margin-top: 20px;
    }
</style>



<a href="@Url.Action("index","Documents")" class="btn btn-warning">عودة لقائمةالوثائق </a>

@using (Html.BeginForm("Create", "Documents", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()



    <div class="form-horizontal">


        @Html.HiddenFor(a => Model.Document.FormId)
        @Html.HiddenFor(a => Model.Document.Name)
        @Html.HiddenFor(a => Model.DocId)
        @Html.HiddenFor(a => Model.IsReplay)

      



        <div class="form-group">
            @Html.LabelFor(model => model.Document.DocumentNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Document.DocumentNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Document.DocumentNumber, "", new { @class = "text-danger" })
            </div>
            @*</div>*@

            @*<div class="form-group">*@
            @Html.LabelFor(model => model.Document.Subject, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Document.Subject, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Document.Subject, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Document.Address, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Document.Address, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Document.Address, "", new { @class = "text-danger" })
            </div>
            @*</div>*@

            @*<div class="form-group">*@
            @Html.LabelFor(model => model.Document.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.EditorFor(model => model.Document.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Document.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        @if((bool) ViewBag.Gereralize==false){

        <div class="form-group">
            @*<div class="form-group">*@
            @Html.LabelFor(model => model.Document.KindId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.DropDownListFor(model => model.Document.KindId, ViewBag.kinds as SelectList, htmlAttributes: new { @class = "form-control chosen-select" })
                @Html.ValidationMessageFor(model => model.Document.KindId, "", new { @class = "text-danger" })
            </div>
            @*</div>*@




            @*<div class="form-group">*@
            @Html.LabelFor(model => model.Document.StatusId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.DropDownListFor(model => model.Document.StatusId, ViewBag.StatusId as SelectList, htmlAttributes: new { @class = "form-control chosen-select" })
                @Html.ValidationMessageFor(model => model.Document.StatusId, "", new { @class = "text-danger" })
            </div>
            @*</div>*@
        </div>


        

        <div class="form-group">
            @Html.LabelFor(model => model.Document.ResponsibleUserId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.DropDownListFor(model => model.Document.ResponsibleUserId, ViewBag.ResponsibleUserId as SelectList, "اختر المسؤول", htmlAttributes: new { @class = "form-control chosen-select" })
                @Html.ValidationMessageFor(model => model.Document.ResponsibleUserId, "", new { @class = "text-danger" })
            </div>
            @*</div>*@


            @*<div>
                <div class="form-group">*@
            @Html.LabelFor(model => model.Document.TypeMailId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.DropDownListFor(model => model.Document.TypeMailId, (SelectList)ViewBag.TypeMailId, "اختر نوع البريد", htmlAttributes: new { @class = "form-control chosen-select", @id = "TOGGLETypeOfMail" })
                @Html.ValidationMessageFor(model => model.Document.TypeMailId, "", new { @class = "text-danger" })
            </div>
            @*</div>*@
        </div>

        }



        <div class="TakeMail">
            <div class="form-group">
                @Html.LabelFor(model => model.Document.MailingNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Document.MailingNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Document.MailingNumber, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="TakeMail">
            <div class="form-group">
                @Html.LabelFor(model => model.Document.MailingDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Document.MailingDate, "{0:dd/MM/yyyy}", new { @class = "form-control", @type = "date" })
                    @Html.ValidationMessageFor(model => model.Document.MailingDate, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="TakeMail">
            <div class="form-group">
                @Html.LabelFor(model => model.Document.PartyId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.Document.PartyId, new SelectList(ViewBag.Parties, "Value", "Text"), htmlAttributes: new { @class = "form-control chosen-select" })
                    @Html.ValidationMessageFor(model => model.Document.PartyId, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="OutgoingMail">
            <div class="form-group">
                @Html.Label("الجهات المستلمة", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("PartyIds", new SelectList(ViewBag.Parties, "Value", "Text"), htmlAttributes: new { multiple = "multiple", @class = "form-control chosen-select" })
                    @Html.ValidationMessage("PartyIds", "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        @*}*@






        <div class="form-group">
            @Html.LabelFor(model => model.Document.DocumentDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.Document.DocumentDate, "{0:dd/MM/yyyy}", new { @class = "form-control", @type = "date" })
                @Html.ValidationMessageFor(model => model.Document.DocumentDate, "", new { @class = "text-danger" })
            </div>
            @*</div>*@



            @*<div class="form-group">*@
            @Html.LabelFor(model => model.Document.NotificationDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.TextBoxFor(model => model.Document.NotificationDate, "{0:dd/MM/yyyy}", new { @class = "form-control", @type = "date" })
                @Html.ValidationMessageFor(model => model.Document.NotificationDate, "", new { @class = "text-danger" })
            </div>
        </div>





        @if (Model.FieldsValues != null)
        {
            for (int i = 0; i < Model.FieldsValues.Values.Count; i++)
            {
                <div class="form-group">
                    <div class="control-label col-md-2">
                        @Model.FieldsValues.Fields[i].Name
                    </div>
                    <div class="col-md-10">
                        @switch (Model.FieldsValues.Fields[i].Type)
                        {
                            case "bool":
                                @Html.RadioButtonFor(model => Model.FieldsValues.Values[i].FieldValue, "true")@:نعم
                                @Html.RadioButtonFor(model => Model.FieldsValues.Values[i].FieldValue, "false")@:لا

                                break;


                            case "float":
                            case "text":
                            case "phone":
                            case "email":
                                @*@Model.FieldsValues.Fields[i].IsRequired*@
                                @Html.TextBoxFor(model => model.FieldsValues.Values[i].FieldValue, new { @class = "form-control" })
                                break;



                            case "date":
                                @Html.TextBoxFor(model => model.FieldsValues.Values[i].FieldValue, new { @class = "form-control", @type = "date" })
                                break;


                        }
                        @Html.ValidationMessageFor(model => Model.FieldsValues.Values[i].Id, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div style="outline: 2px solid yellow;margin:1em;display:inline-block;overflow:visible"></div>

                @Html.HiddenFor(model => model.FieldsValues.Values[i].FieldId)

                @Html.HiddenFor(model => model.FieldsValues.Fields[i].IsRequired)
                @Html.HiddenFor(model => model.FieldsValues.Fields[i].Type)
                @Html.HiddenFor(model => model.FieldsValues.Fields[i].Name)
            }
        }


        <div class="form-group">
            @Html.LabelFor(model => model.Document.Notes, htmlAttributes: new { @id = "NoteId", style = "color:blue", title = "انقر لإظهار خانة الملاحظة", @class = "control-label col-md-2 " })
            <div id="NoteSlide" class="col-md-10">
                @*<textarea class="ckeditor" name="Notes"></textarea>*@

                @Html.TextAreaFor(model => model.Document.Notes, new { @id = "ck", @class = "ckeditor" })
                @Html.ValidationMessageFor(model => model.Document.Notes, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group">
            @Html.Label("الاقسام المرتبطة", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("RelatedDepartments", (SelectList)ViewBag.RelatedDepartments, htmlAttributes: new { style = "padding:2px", multiple = "multiple", @class = "form-control chosen-select" })
            </div>
        </div>



        <div class="form-group">
            @Html.Label("المجموعات المرتبطة", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("RelatedGroups", (SelectList)ViewBag.RelatedGroups, htmlAttributes: new { style = "padding:2px", multiple = "multiple", @class = "form-control chosen-select" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("العناصر المرتبطة", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("RelatedUsers", (SelectList)ViewBag.RelatedUsers, htmlAttributes: new { style = "padding:2px", multiple = "multiple", @class = "form-control chosen-select" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Document.FileUrl, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" name="UploadFile" multiple />
                @Html.ValidationMessageFor(model => model.Document.FileUrl, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Document.FileUrl, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <button type="button" class="btn btn-info" onclick="scanToJpg();">مسح ضوئي</button>
            </div>
        </div>
        
        <div id="images"></div>
        <hr />

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="إضافة وثيقة جديدة" class="btn btn-primary" onclick="submitFormWithScannedImages();" />
            </div>
        </div>
    </div>

}


@Html.Partial("_LastView")


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")


    <script>



        $(function () {
            $(".chosen-select").chosen({
                placeholder_text_single: "حدد من النتائج",
                rtl: true,
                no_results_text: "لا يوجد نتائج!"
            });
        });

        $(function () {
            var TypeOfMail = $("#TOGGLETypeOfMail");

            // Take Mail
            if (TypeOfMail.val() != "1") {
                $('.TakeMail').hide();
            }

            if (TypeOfMail.val() != "2") {
                $('.OutgoingMail').hide();
            }

            TypeOfMail.change(function () {
                // Take Mail
                if ($(this).val() == "1") {

                    $(".TakeMail").show(300);
                    $(".TakeMail").removeClass('displayTakeMail');

                    $('.OutgoingMail').hide(300);
                    $(".OutgoingMail").addClass('displayTakeMail');

                }
                else if (TypeOfMail.val() == "2") {

                    $(".OutgoingMail").show(300);
                    $(".OutgoingMail").removeClass('displayTakeMail');

                    $('.TakeMail').hide(300);
                    $(".TakeMail").addClass('displayTakeMail');

                }

                else {

                    $('.TakeMail').hide(300);
                    $(".TakeMail").addClass('displayTakeMail');

                    $('.OutgoingMail').hide(300);
                    $(".OutgoingMail").addClass('displayTakeMail');

                }
            });
        });



        $("#NoteId").click(function () {
            $("#NoteSlide").slideToggle(400);
        });



    </script>
}
<style>
    .displayTakeMail {
        display: none;
    }

    #NoteSlide {
        display: none;
    }
</style>
