@model ArchiveProject2019.ViewModel.DocumentDocIdFieldsValuesViewModel

@{
    ViewBag.Title = "إنشاء وثيقة جديدة";
    Layout = "~/Views/Shared/_DashBoardLayout.cshtml";
}

@Html.Partial("_StartView")


<script src="~/Scripts/ckeditor/ckeditor.js"></script>

<a href="@Url.Action("index","Documents")" class="btn btn-default">عودة لقائمةالوثائق  <i class="glyphicon glyphicon-backward"></i></a>

@using (Html.BeginForm("Create", "Documents", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()



<div class="form-horizontal">


    @Html.HiddenFor(a => Model.Document.FormId)
    @Html.HiddenFor(a => Model.Document.Name)
    @Html.HiddenFor(a => Model.DocId)
    @Html.HiddenFor(a => Model.IsReplay)

    <div>
        <div class="form-group">
            @Html.LabelFor(model => model.Document.DepartmentId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Document.DepartmentId, ViewBag.Departments as SelectList, htmlAttributes: new { @class = "form-control chosen-select" })
                @Html.ValidationMessageFor(model => model.Document.DepartmentId, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div>
        <div class="form-group">
            @Html.LabelFor(model => model.Document.TypeMailId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Document.TypeMailId, (SelectList)ViewBag.TypeMailId, "اختر نوع البريد", htmlAttributes: new { @class = "form-control chosen-select", @id = "TOGGLETypeOfMail" })
                @Html.ValidationMessageFor(model => model.Document.TypeMailId, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    @*Start Take Mail*@
    <div class="TakeMail">
        <div class="form-group">
            @Html.LabelFor(model => model.Document.MailingNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Document.MailingNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Document.MailingNumber, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="TakeMail">
        <div class="form-group">
            @Html.LabelFor(model => model.Document.MailingDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Document.MailingDate, "{0:dd/MM/yyyy}", new { @class = "form-control", @type = "date" })
                @Html.ValidationMessageFor(model => model.Document.MailingDate, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    @if (((SelectList)ViewBag.Parties).Count() <= 0)
    {
        <div class="form-group">
            @Html.LabelFor(model => model.Document.PartyId, new { @class = "col-md-2 control-label" })
            <div class="col-md-10" style="overflow:auto;height:150px">
                <div class="alert alert-warning" style="text-align:center;font-size:larger">
                    <span class="glyphicon glyphicon-bell">
                    </span> لا يتوفر جهات
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="TakeMail">
            <div class="form-group">
                @Html.LabelFor(model => model.Document.PartyId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.Document.PartyId, new SelectList(ViewBag.Parties, "Value", "Text"), htmlAttributes: new { @class = "form-control chosen-select" })
                    @Html.ValidationMessageFor(model => model.Document.PartyId, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    }
    @*End Take Mail*@

    @*Start Outging Mail*@
    @if (((SelectList)ViewBag.Parties).Count() <= 0)
    {
        <div class="OutgoingMail">
            <div class="form-group">
                @Html.Label("الجهات المستلمة", new { @class = "col-md-2 control-label" })
                <div class="col-md-10" style="overflow:auto;height:150px">
                    <div class="alert alert-warning" style="text-align:center;font-size:larger">
                        <span class="glyphicon glyphicon-bell">
                        </span> لا يتوفر جهات
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="OutgoingMail">
            <div class="form-group">
                @Html.Label("الجهات المستلمة", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("PartyIds", new SelectList(ViewBag.Parties, "Value", "Text"), htmlAttributes: new { multiple = "multiple", @class = "form-control chosen-select" })
                    @Html.ValidationMessage("PartyIds", "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    }
    @*End Outgoing Mail*@

    @*Start Internal Mail*@
    @if (((SelectList)ViewBag.Departments).Count() <= 0)
    {
        <div class="InternalMail">
            <div class="form-group">
                @Html.Label("الاقسام المستهدفة", new { @class = "col-md-2 control-label" })
                <div class="col-md-10" style="overflow:auto;height:150px">
                    <div class="alert alert-warning" style="text-align:center;font-size:larger">
                        <span class="glyphicon glyphicon-bell">
                        </span> لا يتوفر أقسام
                    </div>
                </div>
            </div>
        </div>

    }
    else
    {
        <div class="InternalMail">
            <div class="form-group">
                @Html.Label("الاقسام المستهدفة", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("Departments", new SelectList(ViewBag.Departments, "Value", "Text"), htmlAttributes: new { multiple = "multiple", @class = "form-control chosen-select" })
                    @Html.ValidationMessage("Departments", "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    }
    @if (((SelectList)ViewBag.Groups).Count() <= 0)
    {
        <div class="InternalMail">
            <div class="form-group">
                @Html.Label("المجموعات المستهدفة", new { @class = "col-md-2 control-label" })
                <div class="col-md-10" style="overflow:auto;height:150px">
                    <div class="alert alert-warning" style="text-align:center;font-size:larger">
                        <span class="glyphicon glyphicon-bell">
                        </span> لا يتوفر مجموعات
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="InternalMail">
            <div class="form-group">
                @Html.Label("المجموعات المستهدفة", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("Groups", new SelectList(ViewBag.Groups, "Value", "Text"), htmlAttributes: new { multiple = "multiple", @class = "form-control chosen-select" })
                    @Html.ValidationMessage("Groups", "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    }
    @*End Internal Mail*@
    <div>
        <div class="form-group">
            @Html.LabelFor(model => model.Document.KindId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Document.KindId, ViewBag.kinds as SelectList, htmlAttributes: new { @class = "form-control chosen-select" })
                @Html.ValidationMessageFor(model => model.Document.KindId, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>


    <div>
        <div class="form-group">
            @Html.LabelFor(model => model.Document.StatusId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Document.StatusId, ViewBag.StatusId as SelectList, htmlAttributes: new { @class = "form-control chosen-select" })
                @Html.ValidationMessageFor(model => model.Document.StatusId, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div>
        <div class="form-group">
            @Html.LabelFor(model => model.Document.ResponsibleUserId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.Document.ResponsibleUserId, ViewBag.ResponsibleUserId as SelectList,"اختر المسؤول" ,htmlAttributes: new { @class = "form-control chosen-select" })
                @Html.ValidationMessageFor(model => model.Document.ResponsibleUserId, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
 
    

    <div class="form-group">
        @Html.LabelFor(model => model.Document.DocumentNumber, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Document.DocumentNumber, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Document.DocumentNumber, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Document.Subject, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Document.Subject, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Document.Subject, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Document.Address, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Document.Address, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Document.Address, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Document.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Document.Description, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Document.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Document.DocumentDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(model => model.Document.DocumentDate, "{0:dd/MM/yyyy}", new { @class = "form-control", @type = "date" })
            @Html.ValidationMessageFor(model => model.Document.DocumentDate, "", new { @class = "text-danger" })
        </div>
    </div>



    <div class="form-group">
        @Html.LabelFor(model => model.Document.NotificationDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.TextBoxFor(model => model.Document.NotificationDate, "{0:dd/MM/yyyy}", new { @class = "form-control", @type = "date" })
            @Html.ValidationMessageFor(model => model.Document.NotificationDate, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.Document.FileUrl, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @*@Html.EditorFor(model => model.Document.FileUrl, new { htmlAttributes = new { @class = "form-control" } })*@
            <input type="file" name="UploadFile" multiple />
            @Html.ValidationMessageFor(model => model.Document.FileUrl, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Document.Notes, htmlAttributes: new { @id = "NoteId", style = "color:blue", title = "انقر لإظهار خانة الملاحظة", @class = "control-label col-md-2 " })
        <div id="NoteSlide" class="col-md-10">
            @*<textarea class="ckeditor" name="Notes"></textarea>*@

            @Html.TextAreaFor(model => model.Document.Notes, new { @id = "ck", @class = "ckeditor" })
            @Html.ValidationMessageFor(model => model.Document.Notes, "", new { @class = "text-danger" })
        </div>
    </div>



    <div class="form-group">
        @Html.Label("الاقسام المرتبطة", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("RelatedDepartments", (SelectList)ViewBag.RelatedDepartments, htmlAttributes: new { style = "padding:2px", multiple = "multiple", @class = "form-control chosen-select" })
        </div>
    </div>



    <div class="form-group">
        @Html.Label("المجموعات المرتبطة", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("RelatedGroups", (SelectList)ViewBag.RelatedGroups, htmlAttributes: new { style = "padding:2px", multiple = "multiple", @class = "form-control chosen-select" })
        </div>
    </div>

    <div class="form-group">
        @Html.Label("العناصر المرتبطة", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("RelatedUsers", (SelectList)ViewBag.RelatedUsers, htmlAttributes: new { style = "padding:2px", multiple = "multiple", @class = "form-control chosen-select" })
        </div>
    </div>



    @if (Model.FieldsValues != null)
    {
        for (int i = 0; i < Model.FieldsValues.Values.Count; i++)
        {
            <div class="form-group">
                <div class="control-label col-md-2">
                    @Model.FieldsValues.Fields[i].Name
                </div>
                <div class="col-md-10">
                    @*@Html.EditorFor(model => model.Values[i].FieldValue, new { htmlAttributes = new { @class = "form-control" } })*@
                    @switch (Model.FieldsValues.Fields[i].Type)
                    {
                        case "bool":
                            @Html.RadioButtonFor(model => Model.FieldsValues.Values[i].FieldValue, "true")@:نعم
                            @Html.RadioButtonFor(model => Model.FieldsValues.Values[i].FieldValue, "false")@:لا

                            break;


                        case "float":
                        case "text":
                        case "phone":
                        case "email":
                            @*@Model.FieldsValues.Fields[i].IsRequired*@
                            @Html.TextBoxFor(model => model.FieldsValues.Values[i].FieldValue, new { @class = "form-control" })
                            break;


                        case "file":
                            @*@Model.FieldsValues.Fields[i].IsRequired*@
                            <input type="file" name="FieldFile" />

                            break;

                        case "date":
                            @Html.TextBoxFor(model => model.FieldsValues.Values[i].FieldValue, new { @class = "form-control", @type = "date" })
                            break;

                            @*@Html.RadioButton(Model.Values[i].FieldValue,"نعم")
                                @Html.RadioButton(Model.Values[i].FieldValue, "لا")*@

                            //break;
                    }
                    @Html.ValidationMessageFor(model => Model.FieldsValues.Values[i].Id, "", new { @class = "text-danger" })
                </div>
            </div>

            <div style="outline: 2px solid yellow;margin:1em;display:inline-block;overflow:visible"></div>

            @Html.HiddenFor(model => model.FieldsValues.Values[i].FieldId)

            @Html.HiddenFor(model => model.FieldsValues.Fields[i].IsRequired)
            @Html.HiddenFor(model => model.FieldsValues.Fields[i].Type)
            @Html.HiddenFor(model => model.FieldsValues.Fields[i].Name)
        }
    }

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="إضافة وثيقة جديدة" class="btn btn-primary" />
        </div>
    </div>
</div>
}





@Html.Partial("_LastView")


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")


    <script>

   

        $(function () {
            $(".chosen-select").chosen({
                placeholder_text_single: "حدد من النتائج",
                rtl: true,
                no_results_text: "لا يوجد نتائج!"
            });
        });

        $(function () {
            var TypeOfMail = $("#TOGGLETypeOfMail");

            // Take Mail
            if (TypeOfMail.val() != "1") {
                $('.TakeMail').hide();
            }
            // Outgoing Mial
            if (TypeOfMail.val() != "2"){
                $('.OutgoingMail').hide();
            }
            // Outing Mial
            if (TypeOfMail.val() != "3") {
                $('.InternalMail').hide();
            }

            TypeOfMail.change(function ()
            {
                // Take Mail
                if ($(this).val() == "1")
                {
                    // Take Mail
                    $(".TakeMail").show(300);
                    $(".TakeMail").removeClass('displayTakeMail');
                    // Outgoing Mial
                    $('.OutgoingMail').hide(300);
                    $(".OutgoingMail").addClass('displayTakeMail');
                    // Internal Mial
                    $('.InternalMail').hide(300);
                    $(".InternalMail").addClass('displayTakeMail');
                }
                else if (TypeOfMail.val() == "2")
                {
                    // Outgoing Mial
                    $(".OutgoingMail").show(300);
                    $(".OutgoingMail").removeClass('displayTakeMail');
                    // Take Mail
                    $('.TakeMail').hide(300);
                    $(".TakeMail").addClass('displayTakeMail');
                    // Internal Mial
                    $('.InternalMail').hide(300);
                    $(".InternalMail").addClass('displayTakeMail');
                }
                else if (TypeOfMail.val() == "3")
                {
                    // Internal Mial
                    $('.InternalMail').show(300);
                    $(".InternalMail").removeClass('displayTakeMail');
                    // Outgoing Mial
                    $(".OutgoingMail").hide(300);
                    $(".OutgoingMail").addClass('displayTakeMail');
                    // Take Mail
                    $('.TakeMail').hide(300);
                    $(".TakeMail").addClass('displayTakeMail');
                }
                else
                {
                    // Take Mail
                    $('.TakeMail').hide(300);
                    $(".TakeMail").addClass('displayTakeMail');
                    // Outgoing Mial
                    $('.OutgoingMail').hide(300);
                    $(".OutgoingMail").addClass('displayTakeMail');
                    // Internal Mial
                    $('.InternalMail').hide(300);
                    $(".InternalMail").addClass('displayTakeMail');
                }
            });
        });



        $("#NoteId").click(function () {
            $("#NoteSlide").slideToggle(400);
        });
    </script>
}
<style>
    .displayTakeMail {
        display: none;
    }

    #NoteSlide {
        display: none;
    }
</style>